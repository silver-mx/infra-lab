global

    # Description used in the stats page
    description The statistics for our web servers

    stats socket /run/haproxy/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
    log stdout format raw local0 info

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3

defaults
    log global
    mode http
    option httplog
    option dontlognull
   
    # Send the original clients IP via the X-Forwarded-For header for all frontends-backends
    # if-none is to set the header only it is not already set.
    option forwardfor if-none
    # The standard Forwarded header can be used instead of X-Forwarded-For.
    option forwarded
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Configure statistics
listen statspage
#bind *:9000 ssl crt /etc/ssl/certs/mycert.pem
bind *:9000
stats enable
stats show-legends
# Default stats page is frontend_host:fronted_port/haproxy?stats, but it can be changed as below.
#stats uri /stats
stats refresh 30s
# Use basic auth to access the stats 
#stats auth admin:password1
stats show-desc
#stats admin if LOCALHOST
stats admin if TRUE

frontend myproxy
    mode http
    bind *:80
    # Send the original clients IP via the X-Forwarded-For (or Forwarded) header (also available globally)
    #option forwardfor
    #option forwarded

    # ACL
    acl is_localhost src 127.0.0.1
    acl has_get_method method GET

    # Example using two defined ACLs (ACL1 and ACL2)
    #use_backend localhost_server if is_localhost has_get_method
    # Example using two defined ACLs (ACL1 or ACL2)
    #use_backend localhost_server if is_localhost or has_get_method
    
    # Example ACL implemented as { src 127.0.0.1 }
    #use_backend localhost_server if { src 127.0.0.1 }
    default_backend mywebservers

backend mywebservers
    # description is used for the stats page
    description Our web servers
    balance roundrobin
    mode http
    option httpchk HEAD /healthcheck.html
    server web1 web1:80 check
    server web2 web2:80 check
